#lang racket
; Dave's solution: Queue code (Exercise 3.22)
(define (make-queue)
  (let ((front-ptr null)
        (rear-ptr null))
    (define (empty-queue?)
      (null? front-ptr))
    ; Return the first item in the queue (or error)
    (define (front-queue)
      (if (empty-queue?)
          (error "Empty queue")
          (mcar front-ptr)))
    (define (insert-queue! item)
      (let ((new-pair (mcons item null)))
        (cond ((empty-queue?)
               (set! front-ptr new-pair)
               (set! rear-ptr new-pair))
              (else
               (set-mcdr! rear-ptr new-pair)
               (set! rear-ptr new-pair)
               ))))
    (define (delete-queue!)
      (cond ((empty-queue?)
             (error "Empty queue"))
            (else
             (set! front-ptr (mcdr front-ptr)))))
    (define (dispatch msg)
      (cond ((eq? msg 'insert!) (lambda (item) (insert-queue! item)))
            ((eq? msg 'front) (front-queue))
            ((eq? msg 'empty?) (empty-queue?))
            ((eq? msg 'delete!) (delete-queue!))
            (else ((error "Unknown operation")))))
    dispatch
    )
  )
(define q (make-queue))
((q 'insert!) 123)
((q 'insert!) 45)
((q 'insert!) 23)
(q 'front)
(q 'delete!)
(q 'front)
(q 'delete!)
(q 'front)
(q 'delete!)
